/*

1. Network 이란?
   - 하나의 Device(컴퓨터)로부터 다른 device로 데이터를 옮기는 것
   - 네트워크 프로그램이란, 통신 프로그램을 의미함.
   - 자바의 네트워크 프로그램은 타 언어에 비해 편리함. 
         왜냐하면 프로그램 개발시 해야 할 많은 기능들이 이미 core api에 구현되어 있기 때문임.


2. 통신의 3대 요소
  1) Server
  2) Client
  3) Network : 서버와 클라이언트를 연결해주는 근간


3. 통신 방법
 1) TCP 통신 방식 ==> Socket 을 사용함.
    - 양방향 연결 지향성 통신 방식(Connection Oriented 방식)
    - 신뢰적
    - 전화통화 방식과 비슷
         철이------------전화-------------순이  
    Server---------Network---------Client
    > 먼저 해당 주소에 있는지 확인을 하고 보냄 > 신뢰적 > but 비교적 속도 느림
    
    서버와 클라이언트가 통신하고자 할 때
    TCP 방식을 하고자 한다면
    1> 우선 서버와 클라이언트가 존재해야 함(즉 양 방향 이어야 함)
    2> 둘 사이에 연결이 이뤄져야 함
    3> 연결이 이뤄진 후 이들간에 대화가 오고갈 때 순이가 전달한 말을 철이가 
             못 알아 들었다면, 철이는 순이에게 다시 말해달라고 요청해서 정확한 내용을 들을 수 있음.
    ex) 전화 통화 방식과 유사
   
   2) UDP 통신 방식 ==> DatagramSocket 을 사용함.
    - 비연결 지향형 통신 방식
    - 비 신뢰적
    - 우편 배달 방식과 비슷 (텔레비젼 방식 -- 사용자가 TV를 보든, 안보든, 방송국에서는 무조건 방송정보를 송신을 해버림.)
    1> UDP 방식은 데이터 손실이 있을 수 있다.(동영상 데이터 같은 경우 화면이 쬐끔 잘려도 무난함. 대신에 동영상 데이터 같은 경우는 데이터의 용량이 크므로 속도가 빨라야 하기에 UDP를 사용함.)
    2> 또한 클라이언트와 서버간에 연결이 이뤄지지 않은 상태에서도 데이터를 보낼 수 있음.
    ex)  우편물 배달 방식과 유사
	철이------------우편배달부-------------순이  
    - 해당 주소에 당연히 "순이"가 있을 것이다 라고 생각하고 보냄 > 있는지 여부는 확인X > 비신뢰적 > 별로 안좋음... > but 속도가 빨라서 자주 사용(용량이 큰 경우!!!)
	ex) TV 송신; 해당 가정(클라이언트)에 TV가 있던 없던, 전원여부와 상관없이 방송국(서버)에서는 일단 송신하는 것과 유사
	
	
4. TCP 방식을 쓸 경우
   1) TCP로의 연결은 Socket 클래스를 사용함.
     - TCP/IP를 써서 서버와 통신하기 위해 클라이언트가 서버에 대한 소켓을 생성해야 함.
     	cf) 소켓(Socket)?
     		>> 동일한 서버에서 여러 클라이언트를 연결할 때
     			환경				>>> PORT(1~65535) >>>			클라이언트
     		서버(203.212.34.9)			80port			http://203.212.34.9:80	웹서버(웹페이지 뷰)
     		CPU(8개)						21port			ftp://203.212.34.9:21	FTP서버(다운용)	
     		RAM(64GB)					25port			smtp://203.212.34.9:25	메일서버 (simple mail transfer protocol)
     									1521			DB 203.212.34.9:1521	오라클DB서버
     			- 서버에서 클라이언트로 연결되는 연결부위 port
     			- 각 형식에 따라서 몇번 포트를 쓰는지 약속되어있기 때문에 보통 생략함
     			- 소켓(Socket); TCP/IP주소:PORT번호
     			- 네트워크 프로그래밍 == 소켓 프로그래밍
     			
     - 이 때 TCP연결을 위해  HOST(서버)이름(ip)과 PORT번호를 정해주어야 함.
     - 포트 번호는 1~65535 까지의 정수값이지만,
       0 ~ 1024 사이의 값은 시스템이 내부적으로 사용하는 포트 번호이므로 사용하지 말아야 함.
          ex> http는 80 포트, telnet은 23번,  ftp는 21번
     - 설정된 포트에서 대기(listening)하고 있는 서버가 존재하고 있으면 연결되고 그렇지 않으면 실패함.
     - 소켓 연결이 이뤄지면 이 Socket을 이용해 서버로의 Stream을 얻어낸다. (data의 이동이기 때문에 IO Stream 사용)
       ...Socket의 getInputStream()/getOutputStream()을 이용함.
     - Socket의 getInputStream()/getOutputStream()을 통해 얻어온 스트림을 통해 데이터를 주고 받는다.
             이 때 노드 스트림에 필터스트림을 덧입혀 좀더 고 수준의 데이터 교환이 가능함.

5. 네트워크 프로그램 절차
 1) IP를 알아낸다.---> InetAddress 클래스를 이용하여.
 2) TCP로 연결 ---> Socket 을 이용하여.
  
  ---------------------------------------------------------
       서버의 경우			          |  클라이언트 경우
  ----------------------------+----------------------------------
  1) ServerSocket	          | 1) Socket 
  2) Socket			          |    하나만 있으면 된다.
         두가지가 필요		          |
  ----------------------------+----------------------------------
  1) 서버 소켓에서는		          | 1)클라이언트 소켓에서는
         열어둘 포트번호를	          |   연결해야할 서버의 ip주소와
         인자로 받는다.		          |   port번호 두개를 인자로 받는다.
					          |  
  ServerSocket ser	          |  Socket cs = new Socket(ip,5555);
  = new ServerSocket(5555);   | 
                              |
  2) 서버 소켓을 통해 클라이언트와        |   
         통신할 소켓을 얻는다.		  |
  Socket sock = ser.accept(); |
  					          |
  ----------------------------+-----------------------------------
  3) 소켓 연결이 이뤄지고 나면 Socket을 사용하여 서버로의 Stream을 얻어냄
    ==> sock.getInputStream()
        sock.getOutputStream()
  
  4) 이 스트림을 통해 데이터를 주고 받는다.

*/